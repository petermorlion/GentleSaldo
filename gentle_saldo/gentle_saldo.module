<?php

/**
* @file
* A custom module for Gentle Ultimate Frisbee and how much the members have to pay.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function gentle_saldo_help($path, $arg) {
  switch ($path) {
    case "admin/help#gentle_saldo":
      return '<p>' . t("A custom module for Gentle Ultimate Frisbee and how much the members have to pay.") . '</p>';
      break;
  }
}

/**
* Implementation of hook_menu
*/
function gentle_saldo_menu() {
    $items['user/%/saldo'] = array(
        'title' => 'Saldo',
        'title callback' => 'gentle_saldo_user_saldo_title',
        'title arguments' => array(1),
        'page callback' => 'gentle_saldo_user_saldo',
        'page arguments' => array(1),
        'access callback' => 'gentle_saldo_user_saldo_access',
        'access arguments' => array('access gentle_saldo', 1),
        'type' => MENU_LOCAL_TASK,
        ); 

    $items['admin/gentle_saldo'] = array(
        'title' => 'Saldos',
        'description' => 'Overview of the Gentle saldos.',
        'page callback' => 'gentle_saldo_overview',
        'page arguments' => array(1),
        'access arguments' => array('manage gentle_saldo'),
        'type' => MENU_NORMAL_ITEM,
    );
    
    $items['admin/gentle_saldo/overview'] = array(
        'title' => 'Overzicht',
        'description' => 'Overview of the Gentle saldos.',
        'page callback' => 'gentle_saldo_overview',
        'page arguments' => array(1),
        'access arguments' => array('manage gentle_saldo'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0
    );

    $items['admin/gentle_saldo/update'] = array(
        'title' => 'Upload',
        'description' => 'Upload the saldos.',
        'page callback' => 'gentle_saldo_update',
        'page arguments' => array(1),
        'access arguments' => array('manage gentle_saldo'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 1
    );

    $items['admin/gentle_saldo/relationships'] = array(
        'title' => 'Ouder-kind',
        'description' => 'Overview of the parent-child relationships.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gentle_saldo_parent_child_overview_form'),
        'access arguments' => array('manage gentle_saldo'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2
    );

    $items['admin/gentle_saldo/relationships/add'] = array(
        'title' => 'Ouder-kind relatie toevoegen',
        'description' => 'Add a parent-child relationship',
        'page callback' => 'gentle_saldo_parent_child_add',
        'page arguments' => array(1),
        'access arguments' => array('manage gentle_saldo')
    );

    $items['admin/gentle_saldo/settings'] = array(
        'title' => 'Instellingen',
        'description' => 'Configuration for the Gentle saldo system.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gentle_saldo_settings'),
        'access arguments' => array('manage gentle_saldo'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3
    );

    return $items;
}

/**
 * Adds the saldo to the menu item title, so users can instantly see their saldo
 */
function gentle_saldo_user_saldo_title($uid) {
    $row = "";	
    $query = "select max(id) as id from gentle_saldo_update";
    $rs = db_query($query);

    # iterate over resultset, will be only once as we call the "max()" function
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $query = "select * from gentle_saldo_update where id = '".$row->id."'";
    $rs = db_query($query);

    # iterate over saldo_updates item, will be only once as the updateid is a unique primary key
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $update_id = $row->id;

    $rs = db_query("SELECT SUM(amount) as 'amount'
                    FROM {gentle_saldo_transaction} 
                    WHERE gentle_saldo_update_id = :update_id and uid = :uid 
                    GROUP BY uid", array(
            ':update_id' => $update_id,
            ':uid' => $uid,
        ));

    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $saldo = $row->amount;

    if ($saldo == NULL) {
        return t('Saldo');
    } else {
        return t('Saldo (' . round($saldo, 2) . ')');
    }
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the gentle_saldo module
 */
function gentle_saldo_perm() {
    return array('manage gentle_saldo', 'debug gentle_saldo', 'access gentle_saldo');
}

/**
 * Implementation of hook_permission. Provides the permissions so they can be selected on the Permissions page.
 */
function gentle_saldo_permission() {
    return array(
        'access gentle_saldo' => array(
            'title' => t('View saldo.'),
            'description' => t('Allow a user to view his/her own saldo.')
        ),
        'manage gentle_saldo' => array(
            'title' => t('Manage Gentle saldos.'),
            'description' => t('Manage the saldos of Gentle members, send mails, change settings.')
        ),
        'debug gentle_saldo' => array(
            'title' => t('Debug Gentle saldos.'),
            'description' => t('Debugging Gentle saldos.')
        ) 
    );
}

/**
* Determines if the user has access to the user saldo.
*/
function gentle_saldo_user_saldo_access($permission, $uid) {
    return $uid == $GLOBALS['user']->uid || user_access($permission);
}

/**
* Show the saldo of the current user (needs improvements like using the Drupal DB API,...)
*/
function gentle_saldo_user_saldo($userId) {
    return gentle_saldo_user_saldo_html($userId);
}

/**
 * Returns the HTML for the user saldo.
 */
function gentle_saldo_user_saldo_html($uid) {
    $row = "";	
    $query = "select max(id) as id from gentle_saldo_update";
    $rs = db_query($query);

    # iterate over resultset, will be only once as we call the "max()" function
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $query = "select * from gentle_saldo_update where id = '".$row->id."'";
    $rs = db_query($query);

    # iterate over saldo_updates item, will be only once as the updateid is a unique primary key
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $update_id = $row->id;

    if (!$update_id) {
        $html = t("Er zijn nog geen saldo's beschikbaar");
    } else {
        $account = user_load($uid);
        $userName = $account->name;
        $html = "";
        $html .= "<h2>" . t("Financieel overzicht: update van ") . date("d-m-Y", $row->date) . t(" voor ") . $userName . "</h2>"; 
        $html .= "<p>" . t("Opmerking: ") . $row->remarks . "</p>";

        $rs = db_query("SELECT cu.name as 'childname'
                        FROM {gentle_saldo_parent_child} r
                        INNER JOIN {users} cu ON cu.uid = r.child_uid
                        WHERE r.parent_uid = :uid
                        order by cu.name", array(
            ':uid' => $uid,
        ));

        $children = array();
        foreach ($rs as $row) {
            $children[] = $row->childname;
        }

        if (count($children) > 0) {
            $html .= "<p>" . t("Je ziet ook de gegevens van ");
            $html .= implode(", ", $children) . ".";
        }
        
        $html .= "<table><thead><tr>";
	    $html .= "<th>" . t("Datum") . "</th>";
        $html .= "<th>" . t("Gebruiker") . "</th>";
	    $html .= "<th>" . t("Cumul") . "</th>";
	    $html .= "<th>" . t("Bedrag") . "</th>";
	    $html .= "<th>" . t("Beschrijving") . "</th>";
	    $html .= "<th>" . t("Opmerkingen") . "</th>";
	    $html .= "</tr></thead><tbody>";

        $rs = db_query("SELECT t.amount, t.description, t.remarks, t.date, 
                            t.uid as 't_uid', cu.name as 'childname', pu.uid as 'parent_uid', cu.uid as 'child_uid', pu.name as 'parentname'
                        FROM {gentle_saldo_transaction} t
                        LEFT OUTER JOIN {gentle_saldo_parent_child} r
                            on r.parent_uid = :uid
                        LEFT OUTER JOIN {users} cu ON cu.uid = r.child_uid
                        LEFT OUTER JOIN {users} pu ON pu.uid = :uid
                        WHERE t.gentle_saldo_update_id = :update_id 
                            and (t.uid = :uid or t.uid = r.child_uid)
                        order by t.date, t.id", array(
            ':update_id' => $update_id,
            ':uid' => $uid,
        ));
        
	    $cumul = 0;
        $index = 0;
        $rowclass = 'even';
    
        foreach ($rs as $row) {
            if ($index % 2 == 0) {
                $rowclass = 'even';
            } else {
                $rowclass = 'odd';
            }

            $name = $row->parentname;
            if ($row->t_uid == $row->child_uid) {
                $name = $row->childname;
            }

		    $html .= "<tr class='" . $rowclass ."'>";
		    $html .= "<td>" .date("d-m-Y", $row->date) . "</td>";
            $html .= "<td>" . $name . "</td>";
		    $html .= "<td>" . $cumul . "</td>";			
		    $html .= "<td>" . $row->amount . "</td>";
		    $html .= "<td>" . $row->description . "</td>";
		    $html .= "<td>" . $row->remarks . "</td>";
		    $html .= "</tr>";

		    $cumul += $row->amount;

            $index++;
	    }
	
	    $html .= "</tbody></table><br /><br />";
	    $html .= "<strong>" . t("HUIDIG SALDO: ") . $cumul . "</strong>";   
    }

    $html .= "<br /><br />";

    $html .= nl2br(variable_get('gentle_saldo_bank_details', ''));

    return $html;
}

/**
 * The form with settings for the Gentle saldo system.
 */
function gentle_saldo_settings() {
    $form = array();
    $form['gentle_saldo_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email sender'),
        '#default_value' => variable_get('gentle_saldo_email', variable_get('site_mail', '')),
        '#size' => 128,
        '#maxlength' => 128,
        '#description' => t("The sender of the email members will receive with their saldo update."),
        '#required' => TRUE,
    );

    $form['gentle_saldo_email_subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Email subject'),
        '#default_value' => variable_get('gentle_saldo_email_subject', 'Gentle Saldo Update'),
        '#size' => 128,
        '#maxlength' => 128,
        '#description' => t("The subject of the email members will receive with their saldo update."),
        '#required' => TRUE,
    );
    
    $form['gentle_saldo_email_body_html'] = array(
        '#type' => 'textarea',
        '#title' => t('Email body'),
        '#default_value' => variable_get('gentle_saldo_email_body_html', ''),
        '#maxlength' => 4096,
        '#description' => t("The body of the email members will receive with their saldo update. HTML is allowed, but not necessary."),
        '#required' => FALSE,
    );

    $form['gentle_saldo_bank_details'] = array(
        '#type' => 'textarea',
        '#title' => t('Bank details'),
        '#default_value' => variable_get('gentle_saldo_bank_details', ''),
        '#maxlength' => 2048,
        '#description' => t("The bank details so members know how and where to transfer the correct amount. HTML is allowed, but not necessary."),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implementation of hook_admin_validate
 */
function gentle_saldo_settings_validate($form, &$form_state) {
    $email = $form_state['values']['gentle_saldo_email'];
    if (!valid_email_address($email)) {
        form_set_error('gentle_saldo_email', t('You must enter a valid email address.'));
    }
}

/**
 * The page for managing the Gentle saldos
 */
function gentle_saldo_update() {
    return drupal_get_form('gentle_saldo_update_form');
}

function gentle_saldo_update_form() {
    $form = array();
    $form['gentle_saldo_update_file_contents'] = array(
        '#type' => 'textarea', 
        '#title' => t('Saldo file contents'),
        '#description' => t('Paste the contents of the saldo Excel file here.'),
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Validates the form for updating the saldos
 */
function gentle_saldo_update_form_validate($form, &$form_state) {
    // TODO: check if there is a file
}

/**
 * Code executed after submitting the form for updating the saldos
 */
function gentle_saldo_update_form_submit($form, &$form_state) {
    $total_line_counter = 0;
    $empty_line_counter = 0;
    $user_counter = 0;
    $cntr = 0;
    $header_processed = false;
    $header = "";
    $date_update = NULL;
    $id_update = "";
    
    $id_speler = "";
    $naam_speler = "";
    $speler_processed = true;

    $all_lines = $form_state['values']['gentle_saldo_update_file_contents'];

    try {
        foreach(preg_split("/((\r?\n)|(\r\n?))/", $all_lines) as $line){
	        $total_line_counter++;
	        $line_stripped = preg_replace("/\t/", "", $line); //alle tabs uit lijn weghalen (voor check op lege lijnen)
	        if (strlen($line_stripped) > 0){ // als lijn niet leeg is, lijn processen
		        $tokens = explode("\t", $line);
		        if($header_processed == false){ // header processen en opslaan in db
			        if (preg_match("/\tlaatste update:\t/", $line)){
				        $date_update = gentle_saldo_datestring_to_timestamp($tokens[2]);
			        }
			        elseif (preg_match("/.*naam\tdatum\tcumulatief\tbedrag\tthema\tverwijzing\/opmerking.*/", $line)){
				        $header_processed = true; //header is volledig ingelezen, header schrijven naar db
                        $id_update = db_insert('gentle_saldo_update')
                            ->fields(array(
                                'date' => $date_update,
                                'remarks' => $header,
                            ))
                            ->execute();
			        }
			        else {
				        if (!preg_match("/^spelers saldos$/", trim($line_stripped))){
                            $header .= mb_check_encoding(trim($line, " \t")) ? trim($line, " \t") : utf8_encode(trim($line, " \t"));
				        }
			        }
		        }
		        else { //header is geprocessed, nu transacties inlezen en schrijven naar db
                    if (trim($tokens[2]) == "totaal"){
				        $speler_processed = true;
                        $user_counter++;
			        }
			        else {
				        if ($speler_processed == true){
					        $id_speler = htmlspecialchars(trim($tokens[0]), ENT_QUOTES, "cp1252");
					        $naam_speler = htmlspecialchars(trim($tokens[1]), ENT_QUOTES, "cp1252");
					        $speler_processed = false;
				        }

				        $datum = gentle_saldo_datestring_to_timestamp($tokens[2]);
				        $bedrag = htmlspecialchars(trim(str_replace(",",".",$tokens[4])), ENT_QUOTES, "cp1252");
				        $beschrijving = mb_check_encoding(trim($tokens[5]), 'UTF-8') ? trim($tokens[5]) : utf8_encode(trim($tokens[5]));
                        $opmerking = mb_check_encoding(trim($tokens[6]), 'UTF-8') ? trim($tokens[6]) : utf8_encode(trim($tokens[6]));

                        if ($id_speler == '') {
                            continue;
                        }

                        if (!user_load($id_speler)) {
                            continue;
                        }

                        db_insert('gentle_saldo_transaction')
                            ->fields(array(
                                'uid' => $id_speler,
                                'gentle_saldo_update_id' => $id_update,
                                'date' => $datum,
                                'amount' => $bedrag,
                                'description' => $beschrijving,
                                'remarks' => $opmerking,
                            ))
                            ->execute();

				        $cntr++;			
			        }
		        }
	        }
	        else $empty_line_counter++;
        }
    
        drupal_set_message(t('Updated the saldo for !user_counter user(s).',
            array('!user_counter' => $user_counter)), 'status');   
    } catch (Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
    }
}

/**
 * The overview page for the saldos.
 */
function gentle_saldo_overview() {
    return drupal_get_form('gentle_saldo_overview_form');
}

/**
 * Returns the form with the overview of the saldos and for sending the mail.
 */
function gentle_saldo_overview_form() {
    global $base_url;

    $form = array();

    // TODO: simplify code for getting max(id), also in user page code
    $row = "";	
    $query = "select max(id) as id from gentle_saldo_update";
    $rs = db_query($query);

    # iterate over resultset, will be only once as we call the "max()" function
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $query = "select * from gentle_saldo_update where id = '".$row->id."'";
    $rs = db_query($query);

    # iterate over saldo_updates item, will be only once as the updateid is a unique primary key
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $update_id = $row->id;

    $rs = db_query("SELECT g.uid, u.name, SUM(g.amount) as 'total' 
                    FROM {gentle_saldo_transaction} g
                        INNER JOIN {users} u ON u.uid = g.uid
                    WHERE g.gentle_saldo_update_id = :update_id 
                    GROUP BY g.uid, u.name
                    ORDER BY u.name", array(
            ':update_id' => $update_id,
        ));

    $html ='<table><thead><tr><th>' . t('Username') . '</th><th>' . t('Saldo') . '</th></tr></thead>';
    $html .= '<tbody>';
    # iterate over saldo_updates item, will be only once as the updateid is a unique primary key
    $index = 0;
    $rowclass = 'even';
    foreach ($rs as $rs_item) {
        if ($index % 2 == 0) {
            $rowclass = 'even';
        } else {
            $rowclass = 'odd';
        }

	    $row = $rs_item;
        
        $saldoLink = '<a href="' . $base_url . '/user/' . $row->uid . '/saldo">' . $row->name . "</a>";
        $html .= '<tr class="' . $rowclass . '"><td>' . $saldoLink . '</td><td>' . round($row->total, 2) . '</td></tr>';
        $index++;
    }

    $html .= '</tbody></table>';

    if (user_access('debug gentle_saldo')) {
        $form['gentle_saldo_debug'] = array(
            '#type' => 'checkbox',
            '#title' => t('Debug-mode'),
            '#description' => t('Sends emails to a single address for testing purposes'),
        );

        $form['gentle_saldo_debug_to'] = array(
            '#type' => 'textfield',
            '#title' => t('Send debug mails to'),
            '#description' => t('Sends a maximum of 4 debug mails to this address.'),
        );

        $form['gentle_saldo_debug_smtp'] = array(
            '#type' => 'textfield',
            '#title' => t('SMTP server for debugging'),
            '#description' => t('The SMTP server to use for debugging. This must be a server that doesn\'t require authentication.
                                 You can use aspmx.l.google.com (with port 25) without authentication if you are sending to a GMail address.
                                 You should only really need this when debuggin locally.'),
        );

        $form['gentle_saldo_debug_port'] = array(
            '#type' => 'textfield',
            '#title' => t('Port for SMTP server for debugging'),
        );
    }

    $form['gentle_saldo_overview_markup'] = array(
        '#markup' => $html, 
    );

    $form['gentle_saldo_send_only_to_negative_saldos'] = array(
        '#type' => 'checkbox',
        '#title' => t('Send mails only to users with a negative saldo'),
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Send mails'),
    );

    return $form;
}

/**
 * Code executed after submitting the overview form.
 */
function gentle_saldo_overview_form_submit($form, &$form_state) {
    $sendOnlyToNegativeSaldos = $form_state['values']['gentle_saldo_send_only_to_negative_saldos'];

    // TODO: simplify code for getting max(id), also in user page code
    $row = "";	
    $query = "select max(id) as id from gentle_saldo_update";
    $rs = db_query($query);

    # iterate over resultset, will be only once as we call the "max()" function
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $query = "select * from gentle_saldo_update where id = '".$row->id."'";
    $rs = db_query($query);

    # iterate over saldo_updates item, will be only once as the updateid is a unique primary key
    foreach ($rs as $rs_item) {
	    $row = $rs_item;
    }

    $update_id = $row->id;

    // TODO: this means only one query, but we're re-using the function for the HTML which does a query per user
    $rs = db_query("SELECT g.uid, u.mail, SUM(g.amount) as 'saldo'
                    FROM {gentle_saldo_transaction} g
                        INNER JOIN {users} u ON u.uid = g.uid
                    WHERE g.gentle_saldo_update_id = :update_id
                    GROUP BY g.uid, u.mail", array(
            ':update_id' => $update_id,
        ));

    $successNumber = 0;
    $errorNumber = 0;
    
    foreach($rs as $row) {
        if ($form_state['values']['gentle_saldo_debug'] && $successNumber > 4) {
            break;
        }

        if ($sendOnlyToNegativeSaldos && $row->saldo > 0) {
            continue;
        }

        $params['uid'] = $row->uid;
            
        $to = $row->mail;
        if ($form_state['values']['gentle_saldo_debug']) {
            if ($form_state['values']['gentle_saldo_debug_smtp'] != '') {
                ini_set('SMTP', $form_state['values']['gentle_saldo_debug_smtp']);
                ini_set('smtp_port', $form_state['values']['gentle_saldo_debug_port']);
            }
            
            $to = $form_state['values']['gentle_saldo_debug_to'];
        }

        $message = drupal_mail('gentle_saldo', 'update', $to, NULL, $params, variable_get('gentle_saldo_email'), TRUE);
        // TODO: counter of successful/unsuccessful emails
        $successNumber++;
    }

    if ($form_state['values']['gentle_saldo_debug']) {
        drupal_set_message(t('Sent out !successNumber debugging mails successfully, !errorNumber were unsuccessful. 
                              No actual members received an email, because you selected debug-mode.', 
                            array('!successNumber' => $successNumber,
                                  '!errorNumber' => $errorNumber)), 'status');
    } else {
        drupal_set_message(t('Sent out !successNumber mails successfully, !errorNumber were unsuccessful.', 
                            array('!successNumber' => $successNumber,
                                  '!errorNumber' => $errorNumber)), 'status');
    }
}

/**
 * The overview page for the relationships.
 */
function gentle_saldo_parent_child_overview_form() {
    global $base_url;

    $rs = db_query("SELECT r.id as 'rid', p.uid as 'parentId', p.name as 'Parent', c.uid as 'childId', c.name as 'Child'
                    FROM {gentle_saldo_parent_child} r
                        INNER JOIN {users} p ON p.uid = r.parent_uid
                        INNER JOIN {users} c ON c.uid = r.child_uid
                    ORDER BY p.name", array()
                  );

    $rows = array();

    foreach ($rs as $rs_item) {
	    $row = $rs_item;
        $parentLink = '<a href="' . $base_url . '/user/' . $row->parentId . '/saldo">' . $row->Parent . "</a>";
        $childLink = '<a href="' . $base_url . '/user/' . $row->childId . '/saldo">' . $row->Child . "</a>";
        
        $rows[$row->rid] = array(
          'parent' => $parentLink,
          'child' => $childLink,
        );
    }

    $header = array(
        'parent' => t('Parent'), 
        'child' => t('Child')
    );
    
    $form = array();

    $form['#prefix'] = "<p><a href='" . $base_url . "/admin/gentle_saldo/relationships/add'>" . t("Toevoegen") . "</a></p>";

    $form['gentle_saldo_relationship_overview'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#empty' => t('There are no relationships defined yet.'),
        '#multiple' => TRUE,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Delete selected'),
    );

    return $form;
}

/*
 * Code for submitting the relationship overview form (deleting relationships)
 */
function gentle_saldo_parent_child_overview_form_submit($form, &$form_state) {
    foreach($form_state['values']['gentle_saldo_relationship_overview'] as $rid) {
        db_delete('gentle_saldo_parent_child')
            ->condition('id', $rid)
            ->execute();
    }

    drupal_set_message(t('The selected relationships have been deleted.'));   
}

/**
 * The saldo mail for users.
 */
function gentle_saldo_mail($key, &$message, $params) {
    $message['subject'] = variable_get('gentle_saldo_email_subject');
    $body = variable_get('gentle_saldo_email_body_html');
    $message['body'][] = $body = nl2br($body);
    $message['body'][] = gentle_saldo_user_saldo_html($params['uid']);
}

/**
 * Converts a datestring to a timestamp
 */
function gentle_saldo_datestring_to_timestamp($datestring) {
    $delimiter = gentle_saldo_delimiter_lookup($datestring);
    $tokens = explode($delimiter, $datestring);
	$timestamp = mktime(0,0,0,$tokens[1],$tokens[0],$tokens[2]);
	return $timestamp;
}

/**
 * Looks up the delimiter
 */
function gentle_saldo_delimiter_lookup($datestring) {
	return ((count(explode("-", $datestring)) > 1) ? '-' : '/');
}

/**
 * Page for adding a new parent-child relationship
 */
function gentle_saldo_parent_child_add() {
    $form = array();    
    return drupal_get_form('gentle_saldo_parent_child_add_form');
}

/**
 * Form for adding a new parent-child relationship
 */
function gentle_saldo_parent_child_add_form() {
    $rs = db_query("SELECT uid, name
                    FROM {users}
                    ORDER BY name", array()
                  );

    $options = array();
    foreach($rs as $row) {
        $options[$row->uid] = $row->name;
    }

    $form = array();
    $form['#prefix'] = t("Add a parent-child relationship here, by selecting the users that represent the parent and the child.
                          The parent will be able to see the child's saldo.");

    $form['gentle_saldo_parent'] = array(
        '#type' => 'select',
        '#title' => t('Ouder'),
        '#options' => $options,
        '#description' => t("De ouder"),
        '#required' => TRUE,
    );

    $form['gentle_saldo_child'] = array(
        '#type' => 'select',
        '#title' => t('Kind'),
        '#options' => $options,
        '#description' => t("Het kind waarvoor de ouder het saldo kan zien."),
        '#required' => TRUE,
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

function gentle_saldo_parent_child_add_form_validate($form, &$form_state) {
    // TODO: check if parent != child
}

function gentle_saldo_parent_child_add_form_submit($form, &$form_state) {
    $parent_uid = $form_state['values']['gentle_saldo_parent'];
    $child_uid = $form_state['values']['gentle_saldo_child'];

    $id_update = db_insert('gentle_saldo_parent_child')
                            ->fields(array(
                                'parent_uid' => $parent_uid,
                                'child_uid' => $child_uid,
                            ))
                            ->execute();

    drupal_set_message(t('The relationship was added succesfully.'), 'status');
}